right1 != right2
run_test <- function(attempt) {
checked_attempt <- catch_error(attempt)
if (is.character(checked_attempt)) return(checked_attempt)
test_rule(attempt)
}
run_test(right1)
run_test(wrong1)
run_test(right2)
run_test(wrong2)
is.numeric(wrong3)
is.numeric(right13)
is.numeric(right1)
length(wrong3)
run_test(wrong3)
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
return(attempt)
}
# Checks for errors and in the absence it returns the result of the test.
run_test <- function(attempt) {
checked_attempt <- catch_error(attempt)
if (is.character(checked_attempt)) return(checked_attempt)
test_rule(attempt)
}
run_test(wrong2)
install.packages("shiny")
install.packages("rsconnect")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
clean_test <- "2, 4, 6"
clean_test
library(magrittr)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove(" ") %>%
stringr::str_split(numbers, ",") %>%
numeric()
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove(" ") %>%
#stringr::str_split(numbers, ",") %>%
numeric()
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove(" ") #%>%
#stringr::str_split(numbers, ",") %>%
#numeric()
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove(" ") #%>%
#stringr::str_split(numbers, ",") %>%
#numeric()
out
}
clean_input(clean_test)
stringr::str_remove?
?stringr::str_remove
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") #%>%
#stringr::str_split(numbers, ",") %>%
#numeric()
out
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split(numbers, ",") #%>%
#numeric()
out
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(numbers, ",") #%>%
#numeric()
out
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",") #%>%
#numeric()
out
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",") %>%
numeric()
out
}
clean_input(clean_test)
foo <- c("2", "4", "6")
numeric(foo)
foo
as.numeric(foo)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",") %>%
as.numeric()
out
}
clean_input(clean_test)
clean_test %>% clean_input() %>% run_test()
c(1, "2", 3) %>% clean_input() %>% run_test()
c("1, two, 3") %>% clean_input() %>% run_test()
c("1, 2, 3") %>% clean_input() %>% run_test()
c("1, 2, 3, 4") %>% clean_input() %>% run_test()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out %>%
as.numeric()
}
c("1, 2, 3, 4") %>% clean_input() %>% run_test()
c("1, two, 3") %>% clean_input() %>% run_test()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
message("This is the 'try' part")
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong.
Read the instructions and try again")
return(NA)
}
)
}
clean_input(clean_test)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
message("This is the 'try' part")
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong.
Read the instructions and try again")
return(NA)
}
)
out
}
clean_input(clean_test)
clean_test %>% clean_input()
c("2, four, 6") %>% clean_input()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
message("This is the 'try' part")
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong.
Read the instructions and try again")
return(NA)
},
warning = function(cond) {
message("Seems you entered something wrong.
Read the instructions and try again.")
return(NA)
}
)
out
}
clean_test %>% clean_input()
c("2, four, 6") %>% clean_input()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
message("This is the 'try' part")
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong. Read the instructions and try again")
return(NA)
},
warning = function(cond) {
message("Seems you entered something wrong. Read the instructions and try again.")
return(NA)
}
)
out
}
clean_test %>% clean_input()
c("2, four, 6") %>% clean_input()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
message("This is the 'try' part")
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong. Read the instructions and try again")
return("")
},
warning = function(cond) {
message("Seems you entered something wrong. Read the instructions and try again.")
return("")
}
)
out
}
clean_test %>% clean_input()
c("2, four, 6") %>% clean_input()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
# If no error/warning spotted
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong. Read the instructions and try again")
return("")
},
warning = function(cond) {
message("Seems you entered something wrong. Read the instructions and try again.")
return("")
}
)
out
}
clean_test %>% clean_input()
c("2, four, 6") %>% clean_input()
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, then splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
# If no error/warning spotted
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong. Read the instructions and try again")
return("")
},
warning = function(cond) {
message("Seems you entered something wrong. Read the instructions and try again.")
return("")
}
)
out
}
clean_test %>% clean_input()
c("2, four, 6") %>% clean_input()
clean_test %>% clean_input()
c("1", "2", "3") %>% clean_input()
c("1", "2", "3") %>% clean_input()
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (attempt == "") return("Error: Try to enter the numbers again.")
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
return(attempt)
}
# Checks for errors and in the absence it returns the result of the test.
run_test <- function(attempt) {
attempt <- clean_input(attempt)
checked_attempt <- catch_error(attempt)
if (is.character(checked_attempt)) return(checked_attempt)
test_rule(attempt)
}
# Checks for errors and in the absence it returns the result of the test.
run_test <- function(attempt) {
attempt <- clean_input(attempt)
checked_attempt <- catch_error(attempt)
if (is.character(checked_attempt)) return(checked_attempt)
test_rule(attempt)
}
run_test(right1)
run_test(c("1, 2, 4"))
c("1, 2, 4") %>% clean_input()
c("1, 2, 4") %>% clean_input() == ""
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
# If no error/warning spotted
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong. Read the instructions and try again")
return("")
},
warning = function(cond) {
message("Seems you entered something wrong. Read the instructions and try again.")
return("")
}
)
out
}
# A function that evaluates the attempt and returns TRUE/FALSE.
test_rule <- function(attempt) {
result <- attempt[1] < attempt[2] & attempt[2] < attempt[3]
result
}
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (attempt == "") return("Error: Try to enter the numbers again.")
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
return(attempt)
}
# Checks for errors and in the absence it returns the result of the test.
run_test <- function(attempt) {
attempt <- clean_input(attempt)
checked_attempt <- catch_error(attempt)
if (is.character(checked_attempt)) return(checked_attempt)
test_rule(attempt)
}
c("1, 2, 4") %>% run_test()
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (length(attempt) == 1 & attempt == "") return("Error: Try to enter the numbers again.")
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
return(attempt)
}
c("1, 2, 4") %>% run_test()
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (length(attempt) == 1) return("Error: Try to enter the numbers again.")
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
return(attempt)
}
c("1, 2, 4") %>% run_test()
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
return(attempt)
}
c("1, 2, 4") %>% run_test()
c("1, 2, 4, 5") %>% run_test()
c("1, 2, 4, five") %>% run_test()
c("1, 2, five") %>% run_test()
c("1, 2, five") %>% run_test()
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
return(attempt)
}
c("1, 2, five") %>% run_test()
c("1, 2, five, 4") %>% run_test()
c("1, 2, 4") %>% run_test()
c("1, 2, 4, 5") %>% run_test()
# The rule. Three numbers, in any ascending order
library(magrittr)
# Takes a list of three numbers and cleans it.
clean_input <- function(numbers) {
# Assumes three digits in a string, separated by a comma
# Removes whitespace, splits on comma, turns into numeric
out <- numbers %>%
stringr::str_remove_all(" ") %>%
stringr::str_split_1(",")
out <- tryCatch(
{
# If no error/warning spotted
as.numeric(out)
},
error = function(cond) {
message("Seems like you entered something wrong. Read the instructions and try again")
return("")
},
warning = function(cond) {
message("Seems you entered something wrong. Read the instructions and try again.")
return("")
}
)
out
}
# Evaluates the attempt and returns TRUE/FALSE.
test_rule <- function(attempt) {
result <- attempt[1] < attempt[2] & attempt[2] < attempt[3]
result
}
# Checks for errors. If not, returns same vector.
catch_error <- function(attempt) {
if (!is.numeric(attempt)) return("Error: I only accept numbers. Try again.")
if (length(attempt) != 3) return("Error: Wrong length. Try again.")
return(attempt)
}
# Combines the three functions into one.
run_test <- function(attempt) {
attempt <- clean_input(attempt)
checked_attempt <- catch_error(attempt)
if (is.character(checked_attempt)) return(checked_attempt)
test_rule(attempt)
}
test_rule(c("0, 2, 4"))
run_test(c("0, 2, 4"))
run_test(c("0, 2, 1"))
run_test(c("0, 2, 2"))
run_test(c("0, 2, 2, 2"))
server <- function(input, output) {
output$value <- renderprint({
input$text %>%
run_test()
})
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
